Setting up a Selenium automation project involves several steps, including configuring project structure, adding dependencies, setting up drivers, and creating configuration files. Here's a step-by-step guide to help you set up a Selenium automation project in Java, complete with configuration files:

**1. Create Project Structure:**
Create a new Java project using your preferred Integrated Development Environment (IDE) like Eclipse or IntelliJ IDEA. Set up the following basic structure:

```
ProjectRoot
├── src
│   ├── main
│   │   └── java
│   │       └── your.package
│   │           └── Main.java
├── config
│   ├── config.properties
├── lib
│   └── selenium-server-standalone.jar
└── chromedriver.exe (or other driver executables)
```

**2. Add Selenium WebDriver Dependency:**
In your project's build configuration (Maven, Gradle, etc.), add a dependency for Selenium WebDriver. For Maven, add the following to your `pom.xml`:

```xml
<dependencies>
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>3.141.59</version>
    </dependency>
</dependencies>
```

**3. Add Configuration File:**
Create a `config` directory in your project's root and add a `config.properties` file inside it. This file will store configuration parameters.

**4. Download WebDriver Executable:**
Download the WebDriver executable for the browser you plan to automate (e.g., ChromeDriver). Place the executable in the root directory of your project or a separate directory like `drivers`.

**5. Write Java Code:**
In your `Main.java` file, you can read the configuration from the `config.properties` file and create your automation script using Selenium WebDriver. Here's a simple example:

```java
package your.package;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class Main {
    public static void main(String[] args) throws IOException {
        // Load configuration from config.properties
        Properties properties = new Properties();
        FileInputStream configFile = new FileInputStream("config/config.properties");
        properties.load(configFile);

        // Set the path to the ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "chromedriver.exe");

        // Create an instance of ChromeDriver
        WebDriver driver = new ChromeDriver();

        // Open the website from config.properties
        driver.get(properties.getProperty("website_url"));

        // Find an element using its ID and perform an action (click in this case)
        WebElement element = driver.findElement(By.id("element_id"));
        element.click();

        // Find an element using its CSS selector and perform an action (enter text)
        WebElement inputElement = driver.findElement(By.cssSelector("input[name='username']"));
        inputElement.sendKeys(properties.getProperty("username"));

        // Close the browser
        driver.quit();
    }
}
```

**6. config.properties:**
Create a `config.properties` file inside the `config` directory:

```properties
website_url=https://www.example.com
username=your_username
```

**7. Run the Project:**
Run the `Main` class. Your Selenium automation project should open the website, interact with elements, and then close the browser.

Remember to adjust paths, URLs, element identifiers, and other details according to your specific project requirements.

This is a basic setup, and you can extend it with more advanced features, test frameworks, reporting tools, and more as your automation project grows.