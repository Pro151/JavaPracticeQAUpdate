Setting up a Selenium automation project involves several steps, including configuring dependencies, creating test scripts, and managing configurations. Here's a step-by-step guide to setting up a Selenium automation project with Java, including configuration files and test execution files for a sample website.

**1. Install Java:**
Make sure you have Java Development Kit (JDK) installed on your system.

**2. Set Up Project Structure:**
Create a project directory and organize it like this:
```
SeleniumAutomationProject/
    ├── src/
    │   ├── main/
    │   └── test/
    ├── lib/ (store external libraries)
    └── config/
```

**3. Download WebDriver Executable:**
Download the WebDriver executable for the browser you'll be using (e.g., ChromeDriver for Google Chrome). Place the executable in a directory (e.g., `lib`).

**4. Add Selenium Dependencies:**
Add the Selenium WebDriver and other required dependencies to your project. You can use a build tool like Maven or Gradle, or manually download the JAR files and place them in the `lib` folder.

**5. Create Configuration Files:**
Create configuration files for managing URLs, credentials, and other settings. Here, we'll use a `config.properties` file in the `config` folder.

`config.properties`:
```properties
# Sample configuration file
website.url=https://www.example.com
username=your_username
password=your_password
```

**6. Write Test Scripts:**
Create Java test scripts in the `src/test` directory. Here's an example script using TestNG for a sample website login scenario.

`LoginTest.java`:
```java
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class LoginTest {
    private WebDriver driver;
    private Properties config;

    @BeforeMethod
    public void setUp() throws IOException {
        // Load configuration properties
        config = new Properties();
        FileInputStream configFile = new FileInputStream("config/config.properties");
        config.load(configFile);

        // Set up WebDriver
        System.setProperty("webdriver.chrome.driver", "lib/chromedriver");
        driver = new ChromeDriver();
        driver.get(config.getProperty("website.url"));
    }

    @Test
    public void testLogin() {
        WebElement usernameInput = driver.findElement(By.name("username"));
        WebElement passwordInput = driver.findElement(By.name("password"));
        WebElement loginButton = driver.findElement(By.cssSelector("button[type='submit']"));

        usernameInput.sendKeys(config.getProperty("username"));
        passwordInput.sendKeys(config.getProperty("password"));
        loginButton.click();

        // Perform assertions and verifications
    }

    @AfterMethod
    public void tearDown() {
        driver.quit();
    }
}
```

**7. Run Tests:**
You can use a test framework like TestNG to run your test scripts. Most modern IDEs support integration with testing frameworks for easy test execution and reporting.

Remember to update the paths and configurations based on your project structure and needs. This example is a starting point for setting up a Selenium automation project with configuration files and test execution files using Java.