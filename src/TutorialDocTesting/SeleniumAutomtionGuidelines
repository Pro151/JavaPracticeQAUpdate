Sure, I can provide you with an example of a Selenium automation process that includes using configuration files and separating different aspects of the automation into separate Java classes. In this example, we'll use TestNG for test management and a configuration file to store test data. We'll also create separate classes for page objects and test cases.

**Step 1: Set Up Your Project:**
1. Create a new Java project in your preferred IDE.
2. Add the Selenium WebDriver libraries and TestNG library to your project.

**Step 2: Configuration File (config.properties):**
Create a configuration file named `config.properties` to store test data such as URLs and usernames. Place this file in your project's root directory.

```properties
# config.properties
website.url=https://www.example.com
username=your_username
```

**Step 3: Page Object Class (LoginPage.java):**
Create a page object class to represent the elements and actions on the login page.

```java
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class LoginPage {
    private WebDriver driver;

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    public void enterUsername(String username) {
        WebElement usernameField = driver.findElement(By.name("username"));
        usernameField.sendKeys(username);
    }

    public void clickLoginButton() {
        WebElement loginButton = driver.findElement(By.id("loginButton"));
        loginButton.click();
    }
}
```

**Step 4: Test Class (LoginTest.java):**
Create a TestNG test class to perform the login test using the page object and configuration file.

```java
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class LoginTest {
    private WebDriver driver;
    private Properties config = new Properties();
    private LoginPage loginPage;

    @BeforeClass
    public void setUp() throws IOException {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        loginPage = new LoginPage(driver);

        FileInputStream configFile = new FileInputStream("config.properties");
        config.load(configFile);
    }

    @Test
    public void loginTest() {
        driver.get(config.getProperty("website.url"));
        loginPage.enterUsername(config.getProperty("username"));
        loginPage.clickLoginButton();
        // Perform assertions or further actions here
    }

    @AfterClass
    public void tearDown() {
        driver.quit();
    }
}
```

In this example, we've used the Page Object pattern to separate the interaction with the login page from the test logic. The configuration file stores the test data. The TestNG test class sets up the WebDriver, loads the configuration, and performs the login test.

Remember to replace `"path/to/chromedriver"` with the actual path to the ChromeDriver executable on your system.

This example provides a structured way to organize your Selenium automation project using configuration files and different classes for page objects and test cases.